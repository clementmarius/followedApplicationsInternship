// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int         @id @default(autoincrement())
  email        String      @unique
  password     String
  profile      Profile?    @relation("UserProfile")
  applications Application[]
  roles        Role[]      @relation("UserRoles")
}

model Role {
  id          Int          @id @default(autoincrement())
  name        String       @unique
  users       User[]       @relation("UserRoles")
}

model Profile {
  id        Int      @id @default(autoincrement())
  firstName String
  lastName  String
  user      User     @relation("UserProfile", fields: [userId], references: [id])
  userId    Int      @unique
  resumes   Resume[]
}

model JobAdvertisement {
  id          Int       @id @default(autoincrement())
  title       String
  description String
  company     Company   @relation(fields: [companyId], references: [id])
  companyId   Int
  jobType     JobType   @relation(fields: [jobTypeId], references: [id])
  jobTypeId   Int
  applications Application[]
}

model JobType {
  id          Int          @id @default(autoincrement())
  type        String       @unique // e.g., 'Internship', 'CDD', 'CDI', 'Alternance'
  advertisements JobAdvertisement[]
}

model Application {
  id                    Int       @id @default(autoincrement())
  user                  User      @relation(fields: [userId], references: [id])
  userId                Int
  jobAdvertisement      JobAdvertisement @relation(fields: [jobAdvertisementId], references: [id])
  jobAdvertisementId    Int
  status                String    // e.g., 'Applied', 'Interview', 'Offer', 'Rejected'
  appliedAt             DateTime  @default(now())
}

model Resume {
  id        Int      @id @default(autoincrement())
  profile   Profile  @relation(fields: [profileId], references: [id])
  profileId Int
  fileUrl   String   // URL du fichier de CV
}

model Company {
  id         Int                @id @default(autoincrement())
  name       String             @unique
  jobs       JobAdvertisement[]
}

model BlacklistedToken {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())
}

